#!/usr/bin/env python
# coding: utf-8

# # Wine Quality Analysis

# In[1]:


from platform import python_version
print(python_version())


# In[2]:


import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings('ignore')


# ## Importing Data

# In[3]:


file = "Red_wine_.csv"


# In[4]:


df = pd.read_csv(file)
df.head()


# ## Exploring Data

# In[5]:


df.info()


# In[6]:


df.describe()


# In[7]:


df.hist(figsize=(15,10))
plt.show()


# In[8]:


plt.figure(figsize=[10,6])
plt.bar(df['quality'],df['alcohol'])
plt.xlabel('quality')
plt.ylabel('alcohol')


# ### Correlation

# In[9]:


plt.figure(figsize=[12,10])
sns.heatmap(df.corr(),annot=True)


# ### Finding  missing values and removing them 

# In[10]:


df.isnull().sum()


# In[11]:


df.update(df.fillna(df.mean()))


# In[12]:


#Filling for categorical values
df = pd.get_dummies(df,drop_first=True)
df


# In[13]:


df['quality'].plot(kind='box')


# In[14]:


df['best quality'] = [1 if x>=7 else 0 for x in df.quality]
df


# ## ML Modeling

# In[15]:


x = df.drop(['quality','best quality'], axis = 1)
y = df['best quality']
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 40)


# In[16]:


from sklearn.preprocessing import MinMaxScaler
normal = MinMaxScaler()


# In[17]:


#Fitting Data
normal_fit = normal.fit(x_train)
new_xtrain = normal_fit.transform(x_train)
new_xtest = normal_fit.transform(x_test)
print(new_xtrain)
print(new_xtest)


# In[18]:


from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
rand = RandomForestClassifier()


# In[19]:


#Fitting Data
fit_rand = rand.fit(new_xtrain, y_train)
#predicting score
rand_score = rand.score(new_xtest, y_test)
print('Score of model is : ', rand_score*100,'%')


# ### Finding error 

# In[20]:


#Display Error
#Calculating Mean Squared Error
from sklearn.metrics import mean_squared_error
Yhat = rand.predict(new_xtest)


# In[21]:


rand_MSE = mean_squared_error(y_test, Yhat)
rand_RMSE = np.sqrt(rand_MSE)


# In[22]:


print('Mean Square Error is: ', rand_MSE)
print('Root Mean Square Error is: ', rand_RMSE)


# ### Result

# In[23]:


x_predict = list(rand.predict(x_test))
predicted_df = {'predicted_values': x_predict,'original_values': y_test}


# In[24]:


print(classification_report(x_predict, y_test))


# In[25]:


pd.DataFrame(predicted_df).head(20)


# Accuracy is 91.25%

# In[ ]:




